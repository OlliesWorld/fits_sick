{"ast":null,"code":"import { PAGINATION_QUERY } from \"../components/Pagination\";\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    //tells apollo we take care of everything\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      // console.log({existing, args, cache})\n      var skip = args.skip,\n          first = args.first;\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); //check if we have existing items\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      });\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        //no items, go to network to fetch\n        return false;\n      }\n\n      if (items.length) {\n        return items;\n      }\n\n      return false; //fallback to network\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      var skip = args.skip,\n          first = args.first;\n      console.log(\"Merged item from network \".concat(incoming.length));\n      var merged = existing ? existing.slice(0) : [];\n\n      for (var i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      } // console.log(merged)\n\n\n      return merged;\n    }\n  };\n}","map":{"version":3,"sources":["/Users/horse/Desktop/sites/wesbos/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","console","log","merged","i"],"mappings":"AACA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA0B;AACrC,SAAO;AACHC,IAAAA,OAAO,EAAE,KADN;AACa;AAChBC,IAAAA,IAFG,kBAEgC;AAAA;;AAAA,UAA9BC,QAA8B,uEAAnB,EAAmB;;AAAA;AAAA,UAAbC,IAAa,QAAbA,IAAa;AAAA,UAAPC,KAAO,QAAPA,KAAO;;AAC/B;AAD+B,UAExBC,IAFwB,GAERF,IAFQ,CAExBE,IAFwB;AAAA,UAElBC,KAFkB,GAERH,IAFQ,CAElBG,KAFkB;AAI/B,UAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAACC,QAAAA,KAAK,EAAEX;AAAR,OAAhB,CAAb;AACA,UAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CAP+B,CAS/B;;AACA,UAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd;;AAEA,UAAGH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAtD,EAA6D;AACzD,eAAOG,KAAP;AACH;;AAED,UAAGA,KAAK,CAACI,MAAN,KAAiBd,KAApB,EAA0B;AACtB;AACA,eAAO,KAAP;AACH;;AAED,UAAGU,KAAK,CAACI,MAAT,EAAgB;AACZ,eAAOJ,KAAP;AACH;;AACD,aAAO,KAAP,CAxB+B,CAwBjB;AACjB,KA3BE;AA4BHK,IAAAA,KA5BG,iBA4BGnB,QA5BH,EA4BaoB,QA5Bb,SA4BgC;AAAA,UAAPnB,IAAO,SAAPA,IAAO;AAAA,UACxBE,IADwB,GACTF,IADS,CACxBE,IADwB;AAAA,UAClBC,KADkB,GACTH,IADS,CAClBG,KADkB;AAE/BiB,MAAAA,OAAO,CAACC,GAAR,oCAAwCF,QAAQ,CAACF,MAAjD;AACA,UAAMK,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAI,IAAIS,CAAC,GAAGrB,IAAZ,EAAkBqB,CAAC,GAAGrB,IAAI,GAAGiB,QAAQ,CAACF,MAAtC,EAA8C,EAAEM,CAAhD,EAAmD;AAC/CD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYJ,QAAQ,CAACI,CAAC,GAAGrB,IAAL,CAApB;AACH,OAN8B,CAO/B;;;AACA,aAAOoB,MAAP;AACH;AArCE,GAAP;AAuCH","sourcesContent":["\nimport { PAGINATION_QUERY } from \"../components/Pagination\"\n\nexport default function paginationField(){\n    return {\n        keyArgs: false, //tells apollo we take care of everything\n        read(existing = [], { args, cache}){\n            // console.log({existing, args, cache})\n            const {skip, first } = args\n\n            const data = cache.readQuery({query: PAGINATION_QUERY})\n            const count = data?._allProductsMeta?.count\n            const page = skip / first + 1\n            const pages = Math.ceil(count / first)\n\n            //check if we have existing items\n            const items = existing.slice(skip, skip + first).filter((x) => x)\n\n            if(items.length && items.length !== first && page === pages) {\n                return items\n            }\n\n            if(items.length !== first){\n                //no items, go to network to fetch\n                return false\n            }\n\n            if(items.length){\n                return items\n            }\n            return false; //fallback to network\n        },\n        merge(existing, incoming,  {args}) {\n            const {skip, first} = args\n            console.log(`Merged item from network ${incoming.length}`)\n            const merged = existing ? existing.slice(0) : []\n            for(let i = skip; i < skip + incoming.length; ++i) {\n                merged[i] = incoming[i - skip]\n            }\n            // console.log(merged)\n            return merged\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}