{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/horse/Desktop/sites/sick_fits/frontend/components/Checkout.js\";\nimport styled from 'styled-components';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { useState } from 'react';\nimport nProgress from 'nprogress';\nimport SickButton from './styles/SickButton';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/client';\nimport { useRouter } from 'next/dist/client/router';\nimport { useCart } from '../lib/cartState';\nimport { CURRENT_USER_QUERY } from './User';\nconst CheckoutFormStyles = styled.form.withConfig({\n  displayName: \"Checkout__CheckoutFormStyles\",\n  componentId: \"sc-10mtoy5-0\"\n})([\"box-shadow:0 1px 2px 2px rgba(0,0,0,0.04);border:1px solid rgba(0,0,0,0.06);border-radius:5px;padding:1rem;display:grid;grid-gap:1rem;\"]);\nconst CREATE_ORDER_MUTATION = gql`\n    mutation CREATE_ORDER_MUTATION($token: String!) {\n        checkout(token: $token) {\n            id\n            charge\n            total\n            items {\n                id\n                name\n            }\n        }\n    }\n`;\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nfunction CheckoutForm() {\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n  const router = useRouter();\n  const {\n    closeCart\n  } = useCart();\n  const [checkout, {\n    error: graphQLError\n  }] = useMutation(CREATE_ORDER_MUTATION, {\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  });\n\n  async function handleSubmit(e) {\n    // 1. Stop the form from submitting and turn the loader one\n    e.preventDefault();\n    setLoading(true);\n    console.log('We gotta do some work..'); // 2. Start the page transition\n\n    nProgress.start(); // 3. Create the payment method via stripe (Token comes back here if successful)\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement)\n    });\n    console.log(paymentMethod); // 4. Handle any errors from stripe\n\n    if (error) {\n      setError(error);\n      nProgress.done();\n      return; //stops checkout from happening\n    } // 5. Send the token from step 3 to our keystone server, via a custom mutation!\n\n\n    const order = await checkout({\n      variables: {\n        token: paymentMethod.id\n      }\n    });\n    console.log('finished with order');\n    console.log(order); // 6. Change the page to view the order\n\n    router.push({\n      pathname: '/order/[id]',\n      query: {\n        id: order.data.checkout.id\n      }\n    }); // 7. Close the cart\n\n    closeCart(); // 8. turn the loader off\n\n    setLoading(false);\n    nProgress.done();\n  }\n\n  return /*#__PURE__*/_jsxDEV(CheckoutFormStyles, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 12\n      },\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this), graphQLError && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 12\n      },\n      children: graphQLError.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SickButton, {\n      children: \"Check Out Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\nfunction Checkout() {\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripeLib,\n    children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\nexport { Checkout };","map":{"version":3,"sources":["/Users/horse/Desktop/sites/sick_fits/frontend/components/Checkout.js"],"names":["styled","loadStripe","CardElement","Elements","useElements","useStripe","useState","nProgress","SickButton","gql","useMutation","useRouter","useCart","CURRENT_USER_QUERY","CheckoutFormStyles","form","CREATE_ORDER_MUTATION","stripeLib","process","env","NEXT_PUBLIC_STRIPE_KEY","CheckoutForm","error","setError","loading","setLoading","stripe","elements","router","closeCart","checkout","graphQLError","refetchQueries","query","handleSubmit","e","preventDefault","console","log","start","paymentMethod","createPaymentMethod","type","card","getElement","done","order","variables","token","id","push","pathname","data","fontSize","message","Checkout"],"mappings":"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","sourcesContent":["import styled from 'styled-components';\nimport { loadStripe } from '@stripe/stripe-js';\nimport {\n  CardElement,\n  Elements,\n  useElements,\n  useStripe,\n} from '@stripe/react-stripe-js';\nimport { useState } from 'react';\nimport nProgress from 'nprogress';\nimport SickButton from './styles/SickButton';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/client';\nimport { useRouter } from 'next/dist/client/router';\nimport {useCart} from '../lib/cartState'; \nimport { CURRENT_USER_QUERY } from './User';\n\nconst CheckoutFormStyles = styled.form`\n  box-shadow: 0 1px 2px 2px rgba(0, 0, 0, 0.04);\n  border: 1px solid rgba(0, 0, 0, 0.06);\n  border-radius: 5px;\n  padding: 1rem;\n  display: grid;\n  grid-gap: 1rem;\n`;\nconst CREATE_ORDER_MUTATION = gql`\n    mutation CREATE_ORDER_MUTATION($token: String!) {\n        checkout(token: $token) {\n            id\n            charge\n            total\n            items {\n                id\n                name\n            }\n        }\n    }\n`;\n\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nfunction CheckoutForm() {\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n  const router = useRouter();\n  const {closeCart} = useCart();\n  const [checkout, {error: graphQLError}] = useMutation(CREATE_ORDER_MUTATION,\n    {\n        refetchQueries: [{query: CURRENT_USER_QUERY}],\n    });\n\n  async function handleSubmit(e) {\n    // 1. Stop the form from submitting and turn the loader one\n    e.preventDefault();\n    setLoading(true);\n    console.log('We gotta do some work..');\n    // 2. Start the page transition\n    nProgress.start();\n    // 3. Create the payment method via stripe (Token comes back here if successful)\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement),\n    });\n    console.log(paymentMethod);\n    // 4. Handle any errors from stripe\n    if (error) {\n      setError(error);\n      nProgress.done();\n      return; //stops checkout from happening\n    }\n    // 5. Send the token from step 3 to our keystone server, via a custom mutation!\n    const order = await checkout({\n        variables: {\n            token: paymentMethod.id,\n        }\n    });\n    console.log('finished with order');\n    console.log(order);\n    // 6. Change the page to view the order\n    router.push({\n        pathname: '/order/[id]',\n        query: {id: order.data.checkout.id},\n    });\n    // 7. Close the cart\n    closeCart();\n    // 8. turn the loader off\n    setLoading(false);\n    nProgress.done();\n  }\n\n  return (\n    <CheckoutFormStyles onSubmit={handleSubmit}>\n      {error && <p style={{ fontSize: 12 }}>{error.message}</p>}\n    {graphQLError && <p style={{ fontSize: 12 }}>{graphQLError.message}</p>}\n      <CardElement />\n      <SickButton>Check Out Now</SickButton>\n    </CheckoutFormStyles>\n  );\n}\n\nfunction Checkout() {\n  return (\n    <Elements stripe={stripeLib}>\n      <CheckoutForm />\n    </Elements>\n  );\n}\n\nexport { Checkout };"]},"metadata":{},"sourceType":"module"}